#!/bin/bash -l

# qsub options
#$ -P lasvchal
#$ -l h_rt=48:00:00
#$ -l mem_total=252G
#$ -pe omp 4
#$ -j y
#$ -o log-$JOB_NAME.qlog

# job info
echo "=========================================================="
echo "Start date: $(date)"
echo "Running on node: $(hostname)"
echo "Current directory: $(pwd)"
echo "Job name: $JOB_NAME"
echo "Job ID: $JOB_ID"
echo "=========================================================="
echo ""

# functions
mesg () { echo -e "[MSG] $@"; }
err () { echo -e "[ERR] $@"; exit 1; }
checkcmd () {
  if [ $? -eq 0 ]
  then
    mesg "$@ succeeded"
  else
    err "$@ failed"
  fi
}

# default values and help message
IHOST="bowtie2/human-agm"
IVIRUS="bowtie2/cov2-NC045512.2"
FVIRUS="references/sars-cov2-NC045512.2.fa"
CVIRUS="references/sars-cov2-NC045512.2.csv"
DB="./kraken2"
LOFREQ="apps/lofreq_star-2.1.3.1/bin/lofreq"
ANN="scripts/annotate-snvs.r"
PLOTS="scripts/basic-plots.r"
HELP="usage: qsub -N JOBNAME $(basename "$0") [options] ID R1 R2

positional arguments:
  ID sample ID for output directory
  R1 path to raw R1 FASTQ file
  R2 path to raw R2 FASTQ file

options (default):
  -t NCBI taxonomy ID of target virus (REQUIRED)
  -o output directory (ID)
  -x host Bowtie2 genome index (${IHOST})
  -v viral Bowtie2 genome index (${IVIRUS})
  -g viral genome FASTA file (${FVIRUS})
  -c viral annotation CSV (${CVIRUS})
  -d Kraken2 database (${DB})
  -h print this message and exit
"

# parsing arguments
while getopts ":ht:o:x:v:g:c:" opt 
do 
  case ${opt} in 
    t ) TAXID="${OPTARG}"
      ;;
    o ) ODIR="${OPTARG}"
      ;;
    x ) IHOST="${OPTARG}"
      ;;
    v ) IVIRUS="${OPTARG}"
      ;;
    g ) FVIRUS="${OPTARG}"
      ;;
    c ) CVIRUS="${OPTARG}"
      ;;
    h ) echo "${HELP}" && exit 0
      ;;
    \? ) err "Invalid option ${opt}\n${HELP}"
      ;;
  esac
done
shift $((OPTIND -1))

# set positional arguments
ID="$1"
R1="$2"
R2="$3"

## STEP 0. INPUT CHECKS
mesg "Step 0/10: Input checks"

# check requirements
if [ -z "$(which kraken2 2> /dev/null)" ]
then
  err "Kraken2 not found in path"
fi 
if [ ! -f "${LOFREQ}" ]
then
  err "LoFreq not found: ${LOFREQ}"
fi
if [ ! -f "${ANN}" ]
then
  err "Invalid annotation script: ${ANN}"
fi 

# check host and viral indices
if [ $(ls -1 ${IHOST}* 2> /dev/null | wc -l) -ne 6 ]
then
  err "Invalid host index: ${IHOST}"
elif [ $(ls -1 ${IVIRUS}* 2> /dev/null | wc -l) -ne 6 ]
then
  err "Invalid viral index: ${IVIRUS}"
else
  mesg "Valid host index: ${IHOST}"
  mesg "Valid viral index: ${IVIRUS}"
fi

# check viral FASTA and CSV
if [ ! -f "${FVIRUS}" ]
then
  err "Invalid viral genome FASTA file: ${FVIRUS}"
elif [ ! -f "${CVIRUS}" ]
then
  err "Invalid viral annotation CSV file: ${CVIRUS}"
else
  mesg "Valid viral genome FASTA file: ${FVIRUS}"
  mesg "Valid viral annotation CSV file: ${CVIRUS}"
fi

# check input FASTQ file
if [ ! -f "${R1}" ]
then
  err "Invalid input R1 FASTQ file: ${R1}"
elif [ ! -f "${R2}" ]
then
  err "Invalid input R2 FASTQ file: ${R2}"
else
  mesg "Valid input R1 FASTQ file: ${R1}"
  mesg "Valid input R2 FASTQ file: ${R2}"
fi 

# check ID 
if [ -z "${ID}" ]
then
  err "No sample ID provided"
else
  mesg "Using sample ID: ${ID}"
fi

# check output directory
if [ -z "${ODIR}" ]
then
  mesg "Using sample ID as output directory: ${ID}"
  ODIR="${ID}"
fi
if [ -d "${ODIR}" ]
then
  mesg "WARNING! Output directory already exists: ${ODIR}"
else
  mesg "Creating output directory: ${ODIR}"
  mkdir -p "${ODIR}"
fi 

# done checking inputs
mesg "Done checking inputs"
echo ""

## STEP 1. RAW FASTQC
mesg "Step 1/10: Evaluate raw sequence quality (FastQC)"
module load fastqc 
VAR="${ODIR}/fastqc-raw"
if [ ! -d "${VAR}" ]
then
  mkdir -p "${VAR}"
fi
mesg "Outputting raw FastQC output files to ${VAR}"
CMD="fastqc --threads 4 --quiet --outdir '${VAR}' '${R1}' '${R2}'"
eval "${CMD}"
checkcmd "FastQC on raw files"
echo ""

## STEP 2. TRIMMOMATIC
mesg "Step 2/10: Trim reads for quality (trimmomatic)"
module load trimmomatic
# run command
CMD="trimmomatic PE -threads 4 '${R1}' '${R2}' '${ODIR}/${ID}-trim-r1.fq.gz' '${ODIR}/${ID}-unpaired1.fq.gz' '${ODIR}/${ID}-trim-r2.fq.gz' '${ODIR}/${ID}-unpaired2.fq.gz' SLIDINGWINDOW:4:20 MINLEN:50"
eval "${CMD}"
checkcmd "trimmomatic on raw files"
# remove unpaired files
rm "${ODIR}/${ID}-unpaired1.fq.gz" "${ODIR}/${ID}-unpaired2.fq.gz"
# only using trimmed files from now on
R1="${ODIR}/${ID}-trim-r1.fq.gz"
R2="${ODIR}/${ID}-trim-r2.fq.gz"
echo ""

# STEP 3. TRIMMED FASTQC
mesg "Step 3/10: Evaluate trimmed sequence quality (FastQC)"
VAR="${ODIR}/fastqc-trimmed"
if [ ! -d "${VAR}" ]
then
  mkdir -p "${VAR}"
fi
mesg "Outputting trimmed FastQC output files to ${VAR}"
CMD="fastqc --threads 4 --quiet --outdir '${VAR}' '${R1}' '${R2}'"
eval "${CMD}"
checkcmd "FastQC on trimmed files"
echo ""

## STEP 4. HOST BOWTIE2
mesg "Step 4/10: Discard host reads (Bowtie2)"
module load bowtie2
VAR="${ODIR}/${ID}-nothost"
# run command
CMD="bowtie2 --threads 4 --very-sensitive --un-conc-gz '${VAR}-r%.fq.gz' -x '${IHOST}' -1 '${R1}' -2 '${R2}' > ${VAR}.sam"
eval "${CMD}"
checkcmd "Bowtie2 alignment to host"
# remove SAM output file
rm "${VAR}.sam"
# using only non-host FASTQ files from now on
R1="${VAR}-r1.fq.gz"
R2="${VAR}-r2.fq.gz"
echo "" 

## STEP 5. NOT-HOST KRAKEN2
mesg "Step 5/10: Metagenomic classification of not-host reads (Kraken2)"
module load gcc
VAR="${ODIR}/${ID}-kraken2"
KRAKEN2="${VAR}-report.tsv"
CMD="kraken2 --threads 4 --paired --db '${DB}' --output '${VAR}-output.tsv' --report '${KRAKEN2}' --use-names --gzip-compressed '${R1}' '${R2}'"
eval "${CMD}"
checkcmd "Kraken2 metagenomic classification"
echo ""

## STEP 6. VIRAL BOWTIE2
mesg "Step 6/10: Align viral reads (Bowtie2)"
module load samtools
VAR="${ODIR}/${ID}-viral"
BAM="${VAR}.bam"
CMD="bowtie2 --threads 4 -x '${IVIRUS}' -1 '${R1}' '${R2}' > '${VAR}.sam'"
eval "${CMD}"
checkcmd "Bowtie2 alignment to virus"
# compress SAM alignment file
CMD="samtools view --threads 4 -b -h '${VAR}.sam' > '${BAM}'"
eval "${CMD}"
checkcmd "SAM to BAM compression"
rm "${VAR}.sam"
echo ""

## STEP 7. VIRAL COVERAGE
mesg "Step 7/10: Calculate viral genome coverage (samtools)"
# sort BAM
SBAM="${VAR}-sorted.bam"
CMD="samtools sort --threads 4 --reference '${FVIRUS}' -o '${SBAM}' --output-fmt BAM '${BAM}'"
eval "${CMD}"
checkcmd "samtools sort"
# calculate depth
COVERAGE="${ODIR}/${ID}-coverage.tsv"
CMD="samtools depth -a -H -d 0 -o '${COVERAGE}' '${SBAM}'"
eval "${CMD}"
checkcmd "samtools depth"
echo ""

## STEP 8. LOFREQ
mesg "Step 8/10: Quantify SNVs (LoFreq)"
# score indels in sorted bam
IBAM="${VAR}-indel.bam"
CMD="${LOFREQ} indelqual --dindel --ref '${FVIRUS}' '${SBAM}' > '${IBAM}'"
eval "${CMD}"
checkcmd "Indel quantification"
# index indel bam
CMD="samtools index -b '${IBAM}'"
eval "${CMD}"
checkcmd "samtools index"
# run lofreq call
VCF="${ODIR}/${ID}-snvs.vcf"
CMD="${LOFREQ} call-parallel --pp-threads 4 --call-indels --sig 0.05 --ref '${FVIRUS}' '${IBAM}' > '${VCF}'"
eval "${CMD}"
checkcmd "LoFreq call"
# remove intermediate files
rm "${SBAM}" "${IBAM}" "${IBAM}.bai"
echo ""

## STEP 9. ANNOTATE SNVs
mesg "Step 9/10: Annotate SNVs (Rscript)"
module load R/3.6.0
SNVS="${ODIR}/${ID}-snvs.csv"
CMD="Rscript ${ANN} -o '${SNVS}' -c '${CVIRUS}' -v '${VCF}'"
eval "${CMD}"
checkcmd "SNV annotation"
echo ""

# STEP 10. PLOTS
mesg "Step 10/10: Plot results (Rscript)"
CMD="Rscript ${PLOTS} --odir '${ODIR}' --coverage '${COVERAGE}' --snvs '${SNVS}' --kraken2 '${KRAKEN2}' --annotation '${CVIRUS}' --id '${ID}' --taxid ${TAXID}"
eval "${CMD}"
checkcmd "Making basic plots"
echo ""
